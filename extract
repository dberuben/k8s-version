#!/bin/bash
set -e

REGION="eu-west-1"

# Function to get the latest EKS version
get_latest_eks_version() {
  eksctl version -o json | jq -r '.EKSServerSupportedVersions | sort | .[-1]'
}

# Function to get the latest OpenSearch version
get_latest_opensearch_version() {
  aws opensearch list-versions --region $REGION --output json | jq -r '
    .Versions[] | 
    select(startswith("OpenSearch_")) | 
    sub("OpenSearch_"; "") | 
    split(".") | 
    map(tonumber) | 
    {major: .[0], minor: .[1]} | 
    select(.major >= 1) | 
    [(.major|tostring),(.minor|tostring)] | 
    join(".")
  ' | sort -V | tail -n 1
}

# Function to get the latest ElastiCache version
get_latest_elasticache_version() {
  aws elasticache describe-cache-engine-versions --engine redis --query 'CacheEngineVersions[].EngineVersion' --output json --region $REGION | jq -r 'sort_by(.) | last'
}

# Function to get the latest Aurora version
get_latest_aurora_version() {
  aws rds describe-db-engine-versions --engine aurora-mysql --query 'DBEngineVersions[].EngineVersion' --output json --region $REGION | jq -r '
    [.[] | 
    select(contains("8.0.mysql_aurora.")) | 
    split("8.0.mysql_aurora.")[1] | 
    select(. != null and . != "")] | 
    sort | last'
}

# Collect all versions
latest_eks_version=$(get_latest_eks_version)
latest_opensearch_version=$(get_latest_opensearch_version)
latest_elasticache_version=$(get_latest_elasticache_version)
latest_aurora_version=$(get_latest_aurora_version)

# Create JSON object with all versions
cat <<EOF >versions.json
{
  "eksLatestVersion": "$latest_eks_version",
  "opensearchLatestVersion": "$latest_opensearch_version",
  "elasticacheLatestVersion": "$latest_elasticache_version",
  "auroraLatestVersion": "$latest_aurora_version"
}
EOF

echo "Versions written to versions.json"

